Altera SOPC Builder Version 11.00 Build 157
Copyright (c) 1999-2009 Altera Corporation.  All rights reserved.


No .sopc_builder configuration file(!)
# 2011.09.15 17:06:26 (*) mk_custom_sdk starting
# 2011.09.15 17:06:26 (*) Reading project D:/11.0_format/For Testing/cycloneIII_3c120_embedded/examples/standard/cycloneIII_3c120_niosII_standard_sopc.ptf.

# 2011.09.15 17:06:26 (*) Finding all CPUs
# 2011.09.15 17:06:26 (*) Finding all available components
# 2011.09.15 17:06:26 (*) Reading D:/11.0_format/For Testing/cycloneIII_3c120_embedded/examples/standard/.sopc_builder/install.ptf

# 2011.09.15 17:06:27 (*) Found 63 components

# 2011.09.15 17:06:27 (*) Finding all peripherals

# 2011.09.15 17:06:27 (*) Finding software components

# 2011.09.15 17:06:28 (*) (Legacy SDK Generation Skipped)
# 2011.09.15 17:06:28 (*) (All TCL Script Generation Skipped)
# 2011.09.15 17:06:28 (*) (No Libraries Built)
# 2011.09.15 17:06:28 (*) (Contents Generation Skipped)
# 2011.09.15 17:06:28 (*) mk_custom_sdk finishing

# 2011.09.15 17:06:28 (*) Starting generation for system: cycloneIII_3c120_niosII_standard_sopc.

...
.
.
.
......
..
.
.
.
..
...

# 2011.09.15 17:06:29 (*) Running Generator Program for pll

qmegawiz [options] [module=<mf_name> param1=value param2=value ... port1 port2 ...] <file_name>
   The last argument to qmegawiz should be the file name.
  options:
   -help or -h             Displays this help
   module=<mf_name>        Specifies the megafunction name to create
                           new wrappers from command line
                           Megafunction parameters and ports can
                           be specified in the command line
                           Megafunction name is optional when editing

                           existing wrappers
   entity=<mf_name>        same as module=<mf_name>
   megafunction=<mf_name>  same as module=<mf_name>

   wizard=<wizard_name>    Specifies the wizard name to create
                           new wrappers from command line
                           Wizard name is optional when editing wrappers
   plugin=<wizard_name>    same as wizard=<wizard_name>

   -f:<param_file>         Gets parameter assignments and port selections
                           from the given file.


   -p:<working_dir>        Sets the default working directory

Megafunction parameters should be specified in the format <par_name>=<value>
Megafunction port usage can be set as <port>=used or <port>=unused
Optional output files generated by the megawizard can be selected/deselected
through the parameter OPTIONAL_FILES.
   INST                    controls the generation of <variation>_inst.v
   INC                     controls the generation of <variation>.inc
   CMP                     controls the generation of <variation>.cmp

   BSF                     controls the generation of <variation>.bsf
   BB                      controls the generation of <variation>_bb.v
   WAVE                    controls the generation of sample waveform file(s)
                           (wherever the wizard supports it)
   SIM_NETLIST             controls the generation of simulation netlist file
                           (wherever the wizard supports it)
   SYNTH_NETLIST           controls the generation of synthesis netlist file
                           (wherever the wizard supports it)

   ALL                     generates all the applicable optional files
   NONE                    disables the generation of all optional files
The above values when preceded by a '-' disable the generation of the file
Multiple files can be enabled or disabled as shown below
   OPTIONAL_FILES=NONE|INC|CMP enables include and component files only
   OPTIONAL_FILES=ALL|-INC enables all files except include file


List of megafunctions supported by the qmegawiz command line mode are
   alt2gxb
   alt4gxb

   altasmi_parallel
   altclkctrl
   altddio_bidir
   altddio_in
   altddio_out
   altecc_decoder
   altecc_encoder
   altfp_abs
   altfp_add_sub
   altfp_atan
   altfp_compare
   altfp_convert
   altfp_div
   altfp_exp
   altfp_inv_sqrt
   altfp_inv
   altfp_log
   altfp_matrix_inv
   altfp_matrix_mult
   altfp_mult
   altfp_sincos
   altfp_sqrt
   altiobuf_bidir
   altiobuf_in
   altiobuf_out
   altlvds_rx
   altlvds_tx
   altmult_accum
   altmult_complex
   altotp
   altpll_reconfig

   altpll
   altremote_update
   altshift_taps
   altsyncram
   alttemp_sense
   alt_c3gxb
   dcfifo
   scfifo

# 2011.09.15 17:06:34 (*) Running Generator Program for tse_pll

qmegawiz [options] [module=<mf_name> param1=value param2=value ... port1 port2 ...] <file_name>
   The last argument to qmegawiz should be the file name.
  options:
   -help or -h             Displays this help
   module=<mf_name>        Specifies the megafunction name to create
                           new wrappers from command line
                           Megafunction parameters and ports can
                           be specified in the command line
                           Megafunction name is optional when editing

                           existing wrappers
   entity=<mf_name>        same as module=<mf_name>
   megafunction=<mf_name>  same as module=<mf_name>

   wizard=<wizard_name>    Specifies the wizard name to create
                           new wrappers from command line
                           Wizard name is optional when editing wrappers
   plugin=<wizard_name>    same as wizard=<wizard_name>

   -f:<param_file>         Gets parameter assignments and port selections
                           from the given file.


   -p:<working_dir>        Sets the default working directory

Megafunction parameters should be specified in the format <par_name>=<value>
Megafunction port usage can be set as <port>=used or <port>=unused
Optional output files generated by the megawizard can be selected/deselected
through the parameter OPTIONAL_FILES.
   INST                    controls the generation of <variation>_inst.v
   INC                     controls the generation of <variation>.inc
   CMP                     controls the generation of <variation>.cmp

   BSF                     controls the generation of <variation>.bsf
   BB                      controls the generation of <variation>_bb.v
   WAVE                    controls the generation of sample waveform file(s)
                           (wherever the wizard supports it)
   SIM_NETLIST             controls the generation of simulation netlist file
                           (wherever the wizard supports it)
   SYNTH_NETLIST           controls the generation of synthesis netlist file
                           (wherever the wizard supports it)

   ALL                     generates all the applicable optional files
   NONE                    disables the generation of all optional files
The above values when preceded by a '-' disable the generation of the file
Multiple files can be enabled or disabled as shown below
   OPTIONAL_FILES=NONE|INC|CMP enables include and component files only
   OPTIONAL_FILES=ALL|-INC enables all files except include file


List of megafunctions supported by the qmegawiz command line mode are
   alt2gxb
   alt4gxb

   altasmi_parallel
   altclkctrl
   altddio_bidir
   altddio_in
   altddio_out
   altecc_decoder
   altecc_encoder
   altfp_abs
   altfp_add_sub
   altfp_atan
   altfp_compare
   altfp_convert
   altfp_div
   altfp_exp
   altfp_inv_sqrt
   altfp_inv
   altfp_log
   altfp_matrix_inv
   altfp_matrix_mult
   altfp_mult
   altfp_sincos
   altfp_sqrt
   altiobuf_bidir
   altiobuf_in
   altiobuf_out
   altlvds_rx
   altlvds_tx
   altmult_accum
   altmult_complex
   altotp
   altpll_reconfig

   altpll
   altremote_update
   altshift_taps
   altsyncram
   alttemp_sense
   alt_c3gxb
   dcfifo
   scfifo

# 2011.09.15 17:06:37 (*) Running Generator Program for tse_tx_pll

qmegawiz [options] [module=<mf_name> param1=value param2=value ... port1 port2 ...] <file_name>
   The last argument to qmegawiz should be the file name.
  options:
   -help or -h             Displays this help
   module=<mf_name>        Specifies the megafunction name to create
                           new wrappers from command line
                           Megafunction parameters and ports can
                           be specified in the command line
                           Megafunction name is optional when editing

                           existing wrappers
   entity=<mf_name>        same as module=<mf_name>
   megafunction=<mf_name>  same as module=<mf_name>

   wizard=<wizard_name>    Specifies the wizard name to create
                           new wrappers from command line
                           Wizard name is optional when editing wrappers
   plugin=<wizard_name>    same as wizard=<wizard_name>

   -f:<param_file>         Gets parameter assignments and port selections
                           from the given file.


   -p:<working_dir>        Sets the default working directory

Megafunction parameters should be specified in the format <par_name>=<value>
Megafunction port usage can be set as <port>=used or <port>=unused
Optional output files generated by the megawizard can be selected/deselected
through the parameter OPTIONAL_FILES.
   INST                    controls the generation of <variation>_inst.v
   INC                     controls the generation of <variation>.inc
   CMP                     controls the generation of <variation>.cmp

   BSF                     controls the generation of <variation>.bsf
   BB                      controls the generation of <variation>_bb.v
   WAVE                    controls the generation of sample waveform file(s)
                           (wherever the wizard supports it)
   SIM_NETLIST             controls the generation of simulation netlist file
                           (wherever the wizard supports it)
   SYNTH_NETLIST           controls the generation of synthesis netlist file
                           (wherever the wizard supports it)

   ALL                     generates all the applicable optional files
   NONE                    disables the generation of all optional files
The above values when preceded by a '-' disable the generation of the file
Multiple files can be enabled or disabled as shown below
   OPTIONAL_FILES=NONE|INC|CMP enables include and component files only
   OPTIONAL_FILES=ALL|-INC enables all files except include file


List of megafunctions supported by the qmegawiz command line mode are
   alt2gxb
   alt4gxb

   altasmi_parallel
   altclkctrl
   altddio_bidir
   altddio_in
   altddio_out
   altecc_decoder
   altecc_encoder
   altfp_abs
   altfp_add_sub
   altfp_atan
   altfp_compare
   altfp_convert
   altfp_div
   altfp_exp
   altfp_inv_sqrt
   altfp_inv
   altfp_log
   altfp_matrix_inv
   altfp_matrix_mult
   altfp_mult
   altfp_sincos
   altfp_sqrt
   altiobuf_bidir
   altiobuf_in
   altiobuf_out
   altlvds_rx
   altlvds_tx
   altmult_accum
   altmult_complex
   altotp
   altpll_reconfig

   altpll
   altremote_update
   altshift_taps
   altsyncram
   alttemp_sense
   alt_c3gxb
   dcfifo
   scfifo

# 2011.09.15 17:06:39 (*) Running Generator Program for cpu

# 2011.09.15 17:06:40 (*) Starting Nios II generation
# 2011.09.15 17:06:41 (*)   Checking for plaintext license.
# 2011.09.15 17:06:54 (*)   Plaintext license not found.
# 2011.09.15 17:06:54 (*)   Checking for encrypted license (non-evaluation).
# 2011.09.15 17:07:07 (*)   Encrypted license found.  SOF will not be time-limited.
# 2011.09.15 17:07:07 (*)   Getting CPU configuration settings
# 2011.09.15 17:07:07 (*)   Elaborating CPU configuration settings
# 2011.09.15 17:07:07 (*)   Creating all objects for CPU

# 2011.09.15 17:07:07 (*)     Testbench
# 2011.09.15 17:07:07 (*)     Instruction decoding
# 2011.09.15 17:07:07 (*)       Instruction fields
# 2011.09.15 17:07:08 (*)       Instruction decodes
# 2011.09.15 17:07:08 (*)       Signals for RTL simulation waveforms
# 2011.09.15 17:07:08 (*)       Instruction controls
# 2011.09.15 17:07:08 (*)     Pipeline frontend
# 2011.09.15 17:07:09 (*)     Pipeline backend
# 2011.09.15 17:07:12 (*)   Generating HDL from CPU objects
# 2011.09.15 17:07:14 (*)   Creating encrypted HDL

# 2011.09.15 17:07:16 (*) Done Nios II generation

# 2011.09.15 17:07:16 (*) Running Generator Program for descriptor_memory

# 2011.09.15 17:07:18 (*) Running Generator Program for ext_flash

# 2011.09.15 17:07:19 (*) Running Generator Program for ddr2_sdram

# 2011.09.15 17:07:20 (*) Running Generator Program for sgdma_tx

# 2011.09.15 17:07:22 (*) Running Generator Program for sgdma_rx

# 2011.09.15 17:07:24 (*) Running Generator Program for sys_clk_timer

# 2011.09.15 17:07:25 (*) Running Generator Program for high_res_timer

# 2011.09.15 17:07:27 (*) Running Generator Program for sysid

# 2011.09.15 17:07:28 (*) Running Generator Program for performance_counter

# 2011.09.15 17:07:29 (*) Running Generator Program for jtag_uart

# 2011.09.15 17:07:31 (*) Running Generator Program for button_pio

# 2011.09.15 17:07:33 (*) Running Generator Program for led_pio

# 2011.09.15 17:07:34 (*) Running Generator Program for cycloneIII_3c120_niosII_standard_sopc_clock_0

# 2011.09.15 17:07:36 (*) Running Generator Program for cycloneIII_3c120_niosII_standard_sopc_clock_1

# 2011.09.15 17:07:37 (*) Running Generator Program for cycloneIII_3c120_niosII_standard_sopc_clock_2

# 2011.09.15 17:07:39 (*) Running Generator Program for pipeline_bridge_before_tristate_bridge

# 2011.09.15 17:07:41 (*) Running Generator Program for cpu_ddr_clock_bridge

# 2011.09.15 17:07:42 (*) Running Generator Program for slow_peripheral_bridge

.

# 2011.09.15 17:07:44 (*) Running Test Generator Program for ddr2_sdram

# 2011.09.15 17:07:44 (*) Making arbitration and system (top) modules.

# 2011.09.15 17:07:59 (*) Generating Quartus symbol for top level: cycloneIII_3c120_niosII_standard_sopc

# 2011.09.15 17:07:59 (*) Symbol D:/11.0_format/For Testing/cycloneIII_3c120_embedded/examples/standard/cycloneIII_3c120_niosII_standard_sopc.bsf already exists, no need to regenerate
# 2011.09.15 17:07:59 (*) Creating command-line system-generation script: D:/11.0_format/For Testing/cycloneIII_3c120_embedded/examples/standard/cycloneIII_3c120_niosII_standard_sopc_generation_script

# 2011.09.15 17:07:59 (*) Running setup for HDL simulator: modelsim


# 2011.09.15 17:08:00 (*) Completed generation for system: cycloneIII_3c120_niosII_standard_sopc.
# 2011.09.15 17:08:00 (*) THE FOLLOWING SYSTEM ITEMS HAVE BEEN GENERATED:
  SOPC Builder database : D:/11.0_format/For Testing/cycloneIII_3c120_embedded/examples/standard/cycloneIII_3c120_niosII_standard_sopc.ptf 
  System HDL Model : D:/11.0_format/For Testing/cycloneIII_3c120_embedded/examples/standard/cycloneIII_3c120_niosII_standard_sopc.v 
  System Generation Script : D:/11.0_format/For Testing/cycloneIII_3c120_embedded/examples/standard/cycloneIII_3c120_niosII_standard_sopc_generation_script 


# 2011.09.15 17:08:00 (*) SUCCESS: SYSTEM GENERATION COMPLETED.


Press 'Exit' to exit.
